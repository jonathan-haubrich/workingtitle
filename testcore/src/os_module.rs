// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DirectoryListingRequest {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub recursive: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DirectoryListingEntry {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub accessed: u64,
    #[prost(uint64, tag = "3")]
    pub modified: u64,
    #[prost(uint64, tag = "4")]
    pub created: u64,
    #[prost(uint64, tag = "5")]
    pub size: u64,
    #[prost(uint32, tag = "6")]
    pub attributes: u32,
    #[prost(enumeration = "FileType", tag = "7")]
    pub r#type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DirectoryListingDirectoryEntry {
    #[prost(message, optional, tag = "1")]
    pub directory: ::core::option::Option<DirectoryListingEntry>,
    #[prost(message, repeated, tag = "2")]
    pub entries: ::prost::alloc::vec::Vec<DirectoryListingEntry>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DirectoryListingResponse {
    #[prost(message, repeated, tag = "1")]
    pub listing: ::prost::alloc::vec::Vec<DirectoryListingDirectoryEntry>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FileType {
    Directory = 0,
    File = 1,
    Symlink = 2,
}
impl FileType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            FileType::Directory => "FILE_TYPE_DIRECTORY",
            FileType::File => "FILE_TYPE_FILE",
            FileType::Symlink => "FILE_TYPE_SYMLINK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FILE_TYPE_DIRECTORY" => Some(Self::Directory),
            "FILE_TYPE_FILE" => Some(Self::File),
            "FILE_TYPE_SYMLINK" => Some(Self::Symlink),
            _ => None,
        }
    }
}
